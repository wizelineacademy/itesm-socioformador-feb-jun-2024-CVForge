generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_AWS")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ai_response {
  ai_response_id String    @id @default(uuid()) @db.Uuid
  plain_text     String?
  cv_id          String?   @unique(map: "unique_cv_id") @db.Uuid
  tokens         Decimal?  @db.Decimal
  request_date   DateTime? @db.Timestamptz(6)
  cv             cv?       @relation(fields: [cv_id], references: [cv_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([cv_id], map: "idx_ai_response_cv_id")
}

model cv {
  cv_id               String            @id @default(uuid()) @db.Uuid
  user_id             String?           @db.Uuid
  title               String?           @db.VarChar(255)
  desired_position_id String?           @db.Uuid
  ai_response         ai_response?
  desired_position    desired_position? @relation(fields: [desired_position_id], references: [desired_position_id], onDelete: NoAction, onUpdate: NoAction)
  users               users?            @relation(fields: [user_id], references: [users_id], onDelete: NoAction, onUpdate: NoAction)
  content             String?           @db.Text
  recommendation      recommendation[]
}

model desired_position {
  desired_position_id String  @id @default(uuid()) @db.Uuid
  title               String? @db.VarChar(255)
  description         String? @db.VarChar(500)
  company             String? @db.VarChar(255)
  years_experience    Int?
  cvs                 cv[]
}

model education {
  education_id         String             @id @default(uuid()) @db.Uuid
  school               String?            @db.VarChar(255)
  education_degree     String?            @db.VarChar(255)
  gpa                  Float?
  start_date           DateTime?          @db.Date
  end_date             DateTime?          @db.Date
  professional_info_id String?            @db.Uuid
  professional_info    professional_info? @relation(fields: [professional_info_id], references: [professional_info_id], onDelete: Cascade, onUpdate: NoAction)
  relevant_coursework  String?            @db.VarChar(500)
}

model professional_info {
  professional_info_id String            @id @default(uuid()) @db.Uuid
  user_id              String?           @unique(map: "unique_user_id") @db.Uuid
  achievement          achievement[]
  certificate          certificate[]
  education            education[]
  general_info         general_info?
  users                users?            @relation(fields: [user_id], references: [users_id], onDelete: Cascade, onUpdate: NoAction)
  project              project[]
  skill                skill[]
  work_experience      work_experience[]

  @@index([user_id], map: "idx_professional_info_user_id")
}

model profile {
  profile_id    String    @id @default(uuid()) @db.Uuid
  user_id       String?   @unique @db.Uuid
  first_name    String?   @db.VarChar(255)
  last_name     String?   @db.VarChar(255)
  email         String    @db.VarChar(255)
  phone         String?   @db.VarChar(255)
  github_link   String?   @db.VarChar(255)
  linkedin_link String?   @db.VarChar(255)
  location      String?   @db.VarChar(255)
  birthdate     DateTime? @db.Date
  gender        String?   @db.VarChar(1)
  users         users?    @relation(fields: [user_id], references: [users_id], onDelete: NoAction, onUpdate: NoAction)
}

model project {
  project_id           String             @id @default(uuid()) @db.Uuid
  name                 String?            @db.VarChar(255)
  description          String?            @db.VarChar(1000)
  start_date           DateTime?          @db.Timestamptz(6)
  end_date             DateTime?          @db.Timestamptz(6)
  professional_info_id String?            @db.Uuid
  professional_info    professional_info? @relation(fields: [professional_info_id], references: [professional_info_id], onDelete: Cascade, onUpdate: NoAction)
}

model recommendation {
  recommendation_id String   @id @default(uuid()) @db.Uuid
  cv_id             String?  @db.Uuid
  title             String?  @db.VarChar(255)
  main_content      String?
  completed         Boolean?
  cv                cv?      @relation(fields: [cv_id], references: [cv_id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  users_id          String             @id @default(uuid()) @db.Uuid
  email             String             @db.VarChar(255)
  password          String             @db.VarChar(60)
  verification      Boolean?
  is_active         Boolean?
  last_login        DateTime?          @db.Timestamptz(6)
  created_at        DateTime?          @db.Timestamptz(6)
  updated_at        DateTime?          @db.Timestamptz(6)
  cv                cv[]
  professional_info professional_info?
  profile           profile?

  @@index([email], map: "idx_users_email")
}

model work_experience {
  work_experience_id   String             @id @default(uuid()) @db.Uuid
  work_position        String?            @db.VarChar(255)
  description          String?            @db.VarChar(1000)
  start_date           DateTime?          @db.Date
  end_date             DateTime?          @db.Date
  professional_info_id String?            @db.Uuid
  professional_info    professional_info? @relation(fields: [professional_info_id], references: [professional_info_id], onDelete: Cascade, onUpdate: NoAction)
}

model achievement {
  achievement_id       String             @id @default(uuid()) @db.Uuid
  professional_info_id String?            @db.Uuid
  name                 String?            @db.VarChar(255)
  description          String?            @db.VarChar(1000)
  professional_info    professional_info? @relation(fields: [professional_info_id], references: [professional_info_id], onDelete: Cascade, onUpdate: NoAction)
}

model certificate {
  certificate_id       String             @id @db.Uuid
  professional_info_id String?            @db.Uuid
  title                String?            @db.VarChar(255)
  organization         String?            @db.VarChar(255)
  start_date           DateTime?          @db.Date
  end_date             DateTime?          @db.Date
  url                  String?
  professional_info    professional_info? @relation(fields: [professional_info_id], references: [professional_info_id], onDelete: Cascade, onUpdate: NoAction)
}

model skill {
  skill_id             String             @id @default(uuid())
  professional_info_id String?            @db.Uuid
  title                String?            @db.VarChar(255)
  duration             String?            @db.VarChar(255)
  proficiency          String?            @db.VarChar(255)
  tag                  String?            @db.VarChar(255)
  professional_info    professional_info? @relation(fields: [professional_info_id], references: [professional_info_id], onDelete: Cascade, onUpdate: NoAction)
}

model general_info {
  general_info_id      String             @id @default(uuid())
  professional_info_id String?            @unique @db.Uuid
  first_name           String?            @db.VarChar(255)
  last_name            String?            @db.VarChar(255)
  email                String?            @db.VarChar(255)
  phone                String?            @db.VarChar(255)
  github_link          String?            @db.VarChar(255)
  linkedin_link        String?            @db.VarChar(255)
  professional_info    professional_info? @relation(fields: [professional_info_id], references: [professional_info_id], onDelete: Cascade, onUpdate: NoAction)
}
